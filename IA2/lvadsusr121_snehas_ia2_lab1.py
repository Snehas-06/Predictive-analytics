# -*- coding: utf-8 -*-
"""LVADSUSR121_SNEHAS_IA2_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PERFqiqDyxEqjHTEDr1axQS6BiTRky0l
"""

import pandas as pd
data_wine = pd.read_csv('/content/drive/MyDrive/Predictive analytics Practice/winequality-red.csv')
print(data_wine)

data_wine.info()
data_wine.head(2)
data_wine.isnull().sum()
data_wine = data_wine.bfill(axis='columns')
data_wine.isnull().sum()

import matplotlib.pyplot as plt

plt.boxplot(data_wine['fixed acidity'])

df_wine = data_wine[data_wine['fixed acidity']<12.5]
df_wine = data_wine[data_wine['fixed acidity']>4]

plt.boxplot(data_wine['alcohol'])

data_wine = data_wine[data_wine['alcohol']<13.3]
plt.boxplot(data_wine['volatile acidity'])

data_wine = data_wine[data_wine['volatile acidity']<1.0]
plt.boxplot(data_wine['citric acid'])

data_wine = data_wine[data_wine['citric acid']<=0.8]
plt.boxplot(data_wine['residual sugar'])

data_wine = data_wine[data_wine['residual sugar']<4]
plt.boxplot(data_wine['chlorides'])

data_wine = data_wine[data_wine['chlorides']<0.11]
data_wine = data_wine[data_wine['chlorides']>0.04]

data_wine.loc[data_wine['quality'] <= 6, 'quality'] = 0
data_wine.loc[data_wine['quality'] > 6, 'quality'] = 1
#Since there are no categorical features

data_wine.duplicated().count()
data_wine.drop_duplicates()

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(df_wine.drop('quality',axis='columns'),df_wine['quality'],test_size=0.3)

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators=100, random_state=42)

clf.fit(x_train, y_train)
predictions = clf.predict(x_test)

from sklearn.metrics import accuracy_score, precision_score, recall_score

accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", round(accuracy*100,2),"%")
prec = precision_score(y_test, predictions)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, predictions)
print("Recall:", round(recall*100,2),"%")