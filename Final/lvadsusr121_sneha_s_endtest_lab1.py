# -*- coding: utf-8 -*-
"""LVADSUSR121_SNEHA S_ENDTEST_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDfDS6ViSCoY1YNlhVB-7whbyGy3Sshi
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report
from matplotlib import pyplot as plt
import seaborn as sns
data = pd.read_csv('/content/drive/MyDrive/Predictive analytics Practice/loan_approval.csv')
print(data)

data.info()

data.isnull().sum()

data.groupby(' loan_status').size().plot(kind='bar')
plt.gca().spines[['top', 'right',]].set_visible(False)

duplicates = data.duplicated(keep=False)
data['dup_bool'] = duplicates
print(data[data['dup_bool'] == True].count())
data.drop('dup_bool',axis=1)
data.head(1)

label_encoder = LabelEncoder()
data[' education'] = label_encoder.fit_transform(data[' education'])
data[' self_employed'] = label_encoder.fit_transform(data[' self_employed'])
data[' loan_status'] = label_encoder.fit_transform(data[' loan_status'])

x = data.drop(['loan_id',' loan_status'],axis=1)
y = data[' loan_status']

x_train, y_train, X_test, y_test = train_test_split(x,y,test_size=0.33, random_state=42)

algorithms = ['Decision tree','Logistic','RandomForest', 'XGB']
accuracys=[]

dt = DecisionTreeClassifier()
dt.fit(x_train,y_train)
y_pred = dt.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("Decision tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accuracys.append(accuracy)


lr = LogisticRegression()
lr.fit(x_train,y_train)
y_pred = lr.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("Logistic tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accuracys.append(accuracy)


rf = RandomForestClassifier()
rf.fit(x_train,y_train)
y_pred = rf.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("RandomForesttree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accuracys.append(accuracy)


xgb = xgb.XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
xgb.fit(x_train, y_train)
y_pred = xgb.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print("XGB Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accuracys.append(accuracy)

print(accuracys)

